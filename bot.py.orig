<<<<<<< HEAD
# import section
import telegram
from telegram.ext import (Updater, CommandHandler,
                          MessageHandler, CallbackQueryHandler, Filters)
import logging
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.utils.helpers import mention_markdown
from TOKENS import TELEGRAM_TOKEN
from wiki_search import wikipedia_search
# from search_download import search_vid, download_vid, video_details
from os import remove
import textFile

keep_file = False
file = ""
# confirm if the imports are ok annie are you ok
print("Starting bot...")

# create updater object
updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
# create dispatcher object
dispatcher = updater.dispatcher

# create log to keep everythin under control AAAAAAAAAAAAAAAAAAAAAAAA
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


# ======== here is the function scope, where you create your functions ========

# create start function for the /start command
def start(update, context):
    response = get_help()
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response
    )


# create get_help function to be used in /start and /help
def get_help(arg=None):
    if arg is None:
        return """Este é um bot que eu criei para testes e aprendizado.
Os comandos presentes no momento são:
/help
/search
/download (INDISPONÍVEL NO MOMENTO)
Mais comandos serão adicionados futuramente.
Para saber mais sobre um comando, digite /help nome_do_comando (sem /).
Repositório do projeto, com mais informações:
https://github.com/Kamuri-chan/KamuriBot"""
    if arg == "search":
        return """/search:
Comando que pesquisa algo na wikipédia e retorna o que econtrar para o usuário.
Uso: /search termo_de_pesquisa."""
    if arg == 'download':
        return """/download: Desabilitado por razões técnicas!"""


# create /help function, can get help from the previous get_help function
def help(update, context):
    value = update.message.text.partition(' ')[2]
    if value == "":
        value = None
    response = get_help(value)
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response)


# create search function for the /search command
def search(update, context):
    value = update.message.text.partition(' ')[2]  # takes user message
    response = wikipedia_search(value)  # uses the wikipedia api to retrieve
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response
    )


# create download function for the /download command
def download(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Desabilitado por razões técnicas!")
    """# takes user search query
    value = update.message.text.partition(' ')[2]
    global video_id
    global video_titles  # set the video ids ant title as global
    # note: it's define as global so we can use it inside another function
    # without return

    # this checks if the user sends a link, so takes the id and download the file
    if "https://www.youtube.com/watch?v=" in value:
        video_id = value.replace("https://www.youtube.com/watch?v=", "")
        title = video_details(video_id, retrieve_title=True)
        download_vid(video_id, title)
        # send audio function, read the documentation pls
        context.bot.send_audio(chat_id=update.effective_chat.id,
                               audio=open(title + '.mp3', 'rb'))

        # keep_file its just for test if we can delete a file
        # and sometimes when i'm testing i like to download a song for me
        global keep_file
        if not keep_file:
            remove(title + '.mp3')
    else:
        response, video_id, video_titles = search_vid(value)
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=response)

        # define the list of options so the user can choose the video
        # you can define this dynamically, but i prefer no
        list_of_opts = ['1', '2',
                        '3', '4', '5']
        button_list = []
        for each in list_of_opts:
            # create buttons
            button_list.append(InlineKeyboardButton(each, callback_data=each))
        # n_cols = 5 is for single row and mutliple columns
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=5))
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text='Escolha a opção: ',
                                 reply_markup=reply_markup)"""

"""
# create build_menu function to, as the name says, bake a cake
def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    # this is in the documentation, read it pls onegai
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


# create callback handler for the buttons and call the download function
def callback_query_handler(update, context):
    global video_titles
    # retrieve the data from the button
    cqd = update.callback_query.data
    # try-except so we can convert the data to int
    try:
        cqd = int(cqd)
    except ValueError:
        pass
    # send message of confirmation to the user, you can get rid of this
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="Baixando música...")
    # retrieve the video title, so we can rename our file to video_name.mp3
    title = video_titles[cqd - 1]
    # calls the download_vid function
    download_vid(video_id[cqd - 1], title)
    # send audio function, read the documentation pls
    context.bot.send_audio(chat_id=update.effective_chat.id,
                           audio=open(title + '.mp3', 'rb'))

    # keep_file its just for test if we can delete a file
    # and sometimes when i'm testing i like to download a song for me
    global keep_file
    if not keep_file:
        remove(title + '.mp3')

"""


def pingme_command(update, context):
    chat_id = update.effective_chat.id
    user = update.effective_user
    username = user.username or user.first_name or 'anon'
    file = textFile.get_file(chat_id)
    args = str(user.id) + ";" + str(username)
    textFile.add_new_user(file, args)
    context.bot.send_message(chat_id=chat_id, text=f"{username} adicionado na lista de ping!")


def pingall_command(update, context):
    chat_id = update.effective_chat.id
    file = textFile.get_file(chat_id)
    user_list = textFile.get_all_users(file, chat_id)
    u = [u for u in user_list]
    empty_list = []
    for i in u:
        empty_list.append(mention_markdown(i[0], textFile.unicode_truncate(i[1], 100), version=2))
    for chunk in textFile.chunks(empty_list, 4):
        message = ' '.join(chunk)
        context.bot.send_message(chat_id=chat_id, text=message, parse_mode=telegram.ParseMode.MARKDOWN_V2)


def unpingme(update, context):
    chat_id = update.effective_chat.id
    file = textFile.get_file(chat_id)
    user = update.effective_user
    try:
        textFile.delete_user(file, user.id)
        message = f"User {user.username} unpingado com sucesso!"
    except TypeError:
        message = f"User {user.username} não está na lista!"
    context.bot.send_message(chat_id=chat_id, text=message)


# creates the unknown function to deal with unknown commands
def unknown(update, context):
    pass


# ====== end of the function scope, do not put functions down or you'll die ===

# set handler for the start function
start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

# set handler for the search function
search_handler = CommandHandler('search', search)
dispatcher.add_handler(search_handler)

# set handler for the download function
download_handler = CommandHandler('download', download)
dispatcher.add_handler(download_handler)

# set handler for the help function
help_handler = CommandHandler('help', help)
dispatcher.add_handler(help_handler)

# set handler for the CallbackQuery
# dispatcher.add_handler(CallbackQueryHandler(callback_query_handler))

pingme_handler = CommandHandler('pingme', pingme_command)
dispatcher.add_handler(pingme_handler)

pingall_handler = CommandHandler('pingall', pingall_command)
dispatcher.add_handler(pingall_handler)

unping_handler = CommandHandler('unpingme', unpingme)
dispatcher.add_handler(unping_handler)
# set handler for the unkown, this has to be aways the last
unknown_handler = MessageHandler(Filters.command, unknown)
dispatcher.add_handler(unknown_handler)

# run bot run
updater.start_polling()

# check if the bot is ready to receive anything gimme you milk senpai
print('bot is ready')
=======
# import section
from telegram.ext import (Updater, CommandHandler,
                          MessageHandler, CallbackQueryHandler, Filters)
import logging
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from TOKENS import TELEGRAM_TOKEN
from wiki_search import wikipedia_search
from search_download import search_vid, download_vid, video_title
from os import remove

keep_file = False

# confirm if the imports are ok annie are you ok
print("Starting bot...")

# create updater object
updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
# create dispatcher object
dispatcher = updater.dispatcher

# create log to keep everythin under control AAAAAAAAAAAAAAAAAAAAAAAA
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


# ======== here is the function scope, where you create your functions ========

# create start function for the /start command
def start(update, context):
    response = get_help()
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response
    )


# create get_help function to be used in /start and /help
def get_help(arg=None):
    if arg is None:
        return """Este é um bot que eu criei para testes e aprendizado.
Os comandos presentes no momento são:
/help
/search
/download
Mais comandos serão adicionados futuramente.
Para saber mais sobre um comando, digite /help nome_do_comando (sem /).
Repositório do projeto, com mais informações:
https://github.com/Kamuri-chan/KamuriBot"""
    if arg == "search":
        return """/search:
Comando que pesquisa algo na wikipédia e retorna o que encontrar para o usuário.
Uso: /search termo_de_pesquisa."""
    if arg == 'download':
        return """/download:
Comando que pesquisa o vídeo que o user quiser no Youtube, retorna uma lista com
os resultados e mostra um menu de botões para o usuário escolher.
O usuário também pode enviar um link do vídeo para o bot.
Depois, o bot faz o download do vídeo e converte em .mp3.
Uso: /download nome_do_video."""


# create /help function, can get help from the previous get_help function
def help(update, context):
    value = update.message.text.partition(' ')[2]
    if value == "":
        value = None
    response = get_help(value)
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response)


# create search function for the /search command
def search(update, context):
    value = update.message.text.partition(' ')[2]  # takes user message
    response = wikipedia_search(value)  # uses the wikipedia api to retrieve
    context.bot.send_message(
        chat_id=update.effective_chat.id, text=response
    )


# create download function for the /download command
def download(update, context):
    # takes user search query
    value = update.message.text.partition(' ')[2]
    global video_id
    global video_titles  # set the video ids ant title as global
    # note: it's define as global so we can use it inside another function
    # without return

    # this checks if the user sends a link, so takes the id and download the file
    if "https://www.youtube.com/watch?v=" in value:
        video_id = value.replace("https://www.youtube.com/watch?v=", "")
        title = video_title(video_id)
        download_vid(video_id, title)
        # send audio function, read the documentation pls
        context.bot.send_audio(chat_id=update.effective_chat.id,
                               audio=open(title + '.mp3', 'rb'))

        # keep_file its just for test if we can delete a file
        # and sometimes when i'm testing i like to download a song for me
        global keep_file
        if not keep_file:
            remove(title + '.mp3')
    else:
        response, video_id, video_titles = search_vid(value)
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=response)

        # define the list of options so the user can choose the video
        # you can define this dynamically, but i prefer no
        list_of_opts = ['1', '2',
                        '3', '4', '5']
        button_list = []
        for each in list_of_opts:
            # create buttons
            button_list.append(InlineKeyboardButton(each, callback_data=each))
        # n_cols = 5 is for single row and mutliple columns
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=5))
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text='Escolha a opção: ',
                                 reply_markup=reply_markup)


# create build_menu function to, as the name says, bake a cake
def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    # this is in the documentation, read it pls onegai
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


# create callback handler for the buttons and call the download function
def callback_query_handler(update, context):
    global video_titles
    # retrieve the data from the button
    cqd = update.callback_query.data
    # try-except so we can convert the data to int
    try:
        cqd = int(cqd)
    except ValueError:
        pass
    # send message of confirmation to the user, you can get rid of this
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="Baixando música...")
    # retrieve the video title, so we can rename our file to video_name.mp3
    title = video_titles[cqd - 1]
    # calls the download_vid function
    download_vid(video_id[cqd - 1], title)
    # send audio function, read the documentation pls
    print('sending audio file...')
    context.bot.send_audio(chat_id=update.effective_chat.id,
                           audio=open(title + '.mp3', 'rb'))

    # keep_file its just for test if we can delete a file
    # and sometimes when i'm testing i like to download a song for me
    global keep_file
    if not keep_file:
        print("deleting mp3 file...")
        remove(title + '.mp3')
        print('Done!')


# creates the unknown function to deal with unknown commands
def unknown(update, context):
    pass


# ====== end of the function scope, do not put functions down or you'll die ===

# set handler for the start function
start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

# set handler for the search function
search_handler = CommandHandler('search', search)
dispatcher.add_handler(search_handler)

# set handler for the download function
download_handler = CommandHandler('download', download)
dispatcher.add_handler(download_handler)

# set handler for the help function
help_handler = CommandHandler('help', help)
dispatcher.add_handler(help_handler)

# set handler for the CallbackQuery
dispatcher.add_handler(CallbackQueryHandler(callback_query_handler))

# set handler for the unkown, this has to be aways the last
unknown_handler = MessageHandler(Filters.command, unknown)
dispatcher.add_handler(unknown_handler)

# run bot run
updater.start_polling()

# check if the bot is ready to receive anything gimme you milk senpai
print('bot is ready')
>>>>>>> e440caa337781c55711ed95d5c098597533bf17d
